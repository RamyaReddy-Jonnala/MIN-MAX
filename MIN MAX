import math
class MinimaxSolver:
    def __init__(self, tree, is_maximizing=True):
        self.tree = tree
        self.is_maximizing = is_maximizing
    def minimax(self, node, depth=0, is_maximizing=None, alpha=-math.inf, beta=math.inf, path=None, use_alpha_beta=False):
        if is_maximizing is None:
            is_maximizing = self.is_maximizing
        if path is None:
            path = []
        current_node = self.tree
        for key in path + [node]:
            current_node = current_node[key]
        if isinstance(current_node, int):  # Terminal node
            return current_node, path + [node]
        best_path = []
        if is_maximizing:
            max_eval = -math.inf
            for child in current_node.keys():
                eval, current_path = self.minimax(
                    child, depth + 1, False, alpha, beta, path + [node], use_alpha_beta
                )
                if eval > max_eval:
                    max_eval = eval
                    best_path = current_path
                if use_alpha_beta:
                    alpha = max(alpha, eval)
                    if beta <= alpha:
                        break
            return max_eval, best_path
        else:
            min_eval = math.inf
            for child in current_node.keys():
                eval, current_path = self.minimax(
                    child, depth + 1, True, alpha, beta, path + [node], use_alpha_beta
                )
                if eval < min_eval:
                    min_eval = eval
                    best_path = current_path
                if use_alpha_beta:
                    beta = min(beta, eval)
                    if beta <= alpha:
                        break
            return min_eval, best_path
tree_figure1 = {
    'A': {
        'B1': {
            'C1': 3,
            'C2': 5,
            'C3': 6,
            'C4': 9,
            'C5': 1,
            'C6': 2,
            'C7': 0,
            'C8': -1,
            'C9': 7
        }
    }
}
tree_figure2 = {
    'MAX': {
        'MIN1': {
            'Search1': 8,
            'Search2': 4,
            'Search3': 6
        },
        'MIN2': {
            'Search4': 1,
            'Search5': 7,
            'Search6': 3
        },
        'MIN3': {
            'Search7': 5,
            'Search8': 2,
            'Search9': 9
        }
    }
}
print("=== Figure 1 ===")
solver1 = MinimaxSolver(tree_figure1)
value1, path1 = solver1.minimax('A')
print(f"Standard Minimax - Optimal value: {value1}")
print(f"Optimal path: {' -> '.join(path1)}")
value1_ab, path1_ab = solver1.minimax('A', use_alpha_beta=True)
print(f"\nAlpha-Beta Pruning - Optimal value: {value1_ab}")
print(f"Optimal path: {' -> '.join(path1_ab)}")
print("\n=== Figure 2 ===")
solver2 = MinimaxSolver(tree_figure2)
value2, path2 = solver2.minimax('MAX')
print(f"Standard Minimax - Optimal value: {value2}")
print(f"Optimal path: {' -> '.join(path2)}")
value2_ab, path2_ab = solver2.minimax('MAX', use_alpha_beta=True)
print(f"\nAlpha-Beta Pruning - Optimal value: {value2_ab}")
print(f"Optimal path: {' -> '.join(path2_ab)}")
